CS112 Notes

classes define the objects

public class node
{
	int data;
	Node next;

	public node(int d, node n)
	{
		data = d;
		next = n;
	}
	
}

_______________________________________________________

STACKS
Last In First Out (LIFO)
Stacks have two funtions push and pop

Push puts the data on the top
Pop takes the data from the top

Examples of Stacks: Undo Button, Things done in reverse, Storing Index, Storing the Target, Reverse a Linked List


Example of storing Index: Whats the longest substring inside ()
Use a Stack to store the index of the parenthesis 
Store the index of the ( and then keep going until you find another ( or ).
If you find another ( you put it in the stack also, otherwise if you find a ) you subtract the index of ) - (





1) Array
Push best case: o(1) worst case: o(n) 
Pop  o(1)

2) Linked List
Push is also the same as addToFront O(1)
Pop is also the same as deleteFront O(1)

QUEUES
First In First Out (FIFO)
Two types of functions - Enqueue, Dequeue
Enqueue is adding to the last
Deuque is taking away the first element

1) Array
Two pointers for the Front and a Tail
Enqueue is O(1)
Dequeue is O(N)

2) Circular Linked List
Enqueue is 0(1)
Dequeue is 0(1)

3) 
________________________________________________________

Sequential Search

Best Case: 0(1)
Worst Case: 0(N)

Average: 
A) ITems have the same probability of being searched
B) items have different probablity of being searched 

Computing the Average
AVG = C1 * P1 + C2 * P2 + ... + Cm * Pm
P = Probaility
C = Item being serached 

If we assume M items
A) each item probability of being searched 1/M

AVG = C1 * 1/M + C2 * 1/M + ... + Cm * 1/m
	= (C1 + C2 + ... + Cm)/(M)

AVG = 1*1/4 + 2*1/4 + 3*1/4 + 4 * 1/4
	= 10/4

B) is the same as A but you can rearrange the probabilities inorder to create a lower avg

________________________________________________________

Binary search comparisons
1) n = 2^k				when the size of the array is a power of 2
2) n = 2^k - 1			when the size of the array is odd

________________________________________________________
public static Node deleteAll(Node front, int target)
{
	if(front == null)
		return null;
	if(front.data == target)
	{
		front = front.next;
		deleteAll(front, target);
		return front;
	}
	else
	{
		front.next = deteleAll(front.next, target);
		return front;
	}

}

public static Node merge(Node forntL1, Node forntL2)
{
	if(L1 == null)
		return L2;
	if(L2 == null)
		return L1;
	if(L1.data < L2.data)
	{
		L1.next = merge(L1.next, L2);
		return L1;

	}
	if(L2.data < L1.data)
	{
		L2.next = merge(L1, L2.next);
		return L2;
	}
	else
		L1.next = merge(L1.next, L2.next);
		return L1;
}
_________________________________________________
Comparison Tree used to analyze the running time of binary search



Ordered Array
Search: 0(LogN) = Binary Search
Insert: 0(N)

Linked List
Search: 0(N)
Insert: 0(N)

____________________________________________________
Binary Search Tree(BST)

CompareTo:
0 - two objects are the same 
less than 0 - first object comes before
greater than 0 - first objects comes after

Inorder = ascending order
Code:

inorder(node)
if(node == null)
	return;
inorder(left)
print(node.key)
print(node.right)


DeleteNode in BST

Three Cases:
1) Nodes is a leaf
	Simply detach from the parent 
2) Node has one child 
	Makes the node's parent refer to the child 	
3) Node has two childs
	This has 3 steps:
	1) Find Inorder Predecesor
	2) Copy Predecesor into the node position
	3) delete the node 

BIG(0)
Insert and Delete have the same worst and best case
Inserting In a Balanced Tree is 0(LogN) which is best Case
Worst case is just a Tree that looks like a linked list where it's 0(N)

Searching
Best Case is the Search for X is the Root 0(1)
Worst case is 0(N)












































______________________________________________________

Array List Resizing when it gets a new element is double in the java class

Everytime you see a parenthessis think about using Stacks

(2*(3-4))/5 --> 234-*5
postOrder(root)
{
	if(root == null)
		return;

	postOrder(root.left)
	postOrder(root.right)

	print root;
}
Tracing the code ^^:
po(/)
	po(*) Left
		po(2) Left
			po(null)
			po(null)
			print 2
		po(-) Right
			po(3)
				po(null)
				po(null)
				print 3
			po(4)
				po(null)
				po(null)
				print 4
		print -
	po(5) Right
		po(null)
		po(null)
		print 5
print /

To evaluate 234-*5/ in a stack
Push 2 3 4 in the stack
When you see - then do 3 - 4, Then you push back -1 into the stack
Then you see * and do 2 * -1 and push -2 back into the stack
Then you push 5 into the stack and then you / and then do -2/5
Code:

public class  postFixEvaluate(String expression)
{
	Stack<Float> Stack = new Stack <Float>();

	for(int i = 0; i < expression.length(); i++)
	{
		if(ch == ' ')
			continue;
		if(ch == '+' || ch == '-'' || ch == '/')
		{
			float first = stack.pop();
			float second = stack.pop();

			switch(ch)
			
			case '-'
				stack.push(second - first)
			case '+'
			case '/'
			case '*'
		}
		else
			stack.push(ch - 'o')
	}
	return stack.pop();

}


Problem Set #3
(100 * 19) + 50x(1 + 2 + 3 + ... + 18) + 18*1
= 10468

Static vs NonStatic Methods

Static:
Does not relate to objects
Memory is static

NonStatic:
Relates to objects
One more parameter
Have to create objects in order to acess the non static method
Memory is non static and thats the reason why we need an object to acess it


________________________________________________________________

Tree Sort Algorithm 

40, 20, 30, 50, 45

1) Create a BST

2) For Each Array Item Best Case: (N Log N) Worst Case is with a Skewed Tree: O(N^2)
	Insert Item in BST

3) Inorder Traversal (N)

N Log N + N = O(N LOG N)

______________________________________________________________________

AVL: Balance BST in which the height of the left and right subtrees differ by at most one node
Height of BT:
A) Empty = -1
N) Not Empty = 1 + Maximum of Heights of the left and right subtree

Every Node keeps
-Parents
-Key
-Left
-Right
-Height
-Balance Factor
	- Left and Right Subtree have equal heaights
	/ Left subtree has one more node in height
	\ Right subtree has one mor node in height than the left

Insert Node
1) Insert Key
2) Backtrack the parent chain updating Balance Factor and height of node
	-If node is unbalanced Stop
		call node X
3) Rebalcne at node X
	1) Identify node R as Root of tallest subtree of X
	2) Identify cases
		Case 1: the Balance Factor of X and R have the same orientation
		Case 2: the Balance Factor of X and R have opposite orientation 
__________________________________________________________________________



		














                                                           













