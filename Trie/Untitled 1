public static TrieNode buildTrie(String[] allWords) 
	{
		int length  = allWords.length;

		TrieNode root = new TrieNode(null, null, null);
		TrieNode tempHolder = new TrieNode(null, null, null);

		if(length == 0)
			return root;
		else if(length == 1)
		{
			Short temp = (short) (allWords[0].length() - 1);
			Indexes substring = new Indexes(0,(short)0, temp);
			TrieNode what = new TrieNode(substring, null, null);

			root.firstChild = what;
			return root;
		}
		else
		{
			for(int i = 0; i < length; i++)
			{

				String newWord = allWords[i];
				String comparedWord;

				TrieNode prevA = new TrieNode(null, null, null);
				TrieNode prevB = new TrieNode(null, null, null);

				TrieNode siblingPtr = new TrieNode(null, null, null);
				TrieNode siblingHolder = new TrieNode(null, null, null);


				TrieNode ptr = new TrieNode(null, null, null);
				ptr = root;

				TrieNode savePtr = new TrieNode(null, null, null);

				short counter1 = 0;
				short counter2 = 0;
				short siblingCounter = 0;

				short start1 = 0;
				short end1 = 0;

				short start2 = 0;
				short end2 = 0;

				//creates first node after root
				if(i == 0 && root.substr == null && root.firstChild == null)
				{
					end1 = (short) (allWords[0].length() - 1);
					Indexes substring = new Indexes(0, start1, end1);
					ptr.firstChild = new TrieNode(substring, null, null);					
					continue;
				}
				else
				{
					ptr = ptr.firstChild;
					siblingPtr = ptr;
					savePtr = ptr;
				}

				while(siblingPtr != null)
				{
					comparedWord = allWords[siblingPtr.substr.wordIndex].substring(siblingPtr.substr.startIndex, siblingPtr.substr.endIndex);

					int bop = 0;

					if(comparedWord.length() < newWord.length())
						bop = comparedWord.length();
					else
						bop = newWord.length();

					for(int x = 0; x < bop; x++)
					{
						if(comparedWord.charAt(x) == newWord.charAt(x))
							counter1++;
						else
							break;
					}
					if(counter1 > 0)
						break;

					siblingHolder = siblingPtr;
					siblingPtr = siblingPtr.sibling;

				}
				ptr = siblingPtr;

				if(counter1 == 0)
				{
					end2 = (short) (newWord.length() - 1);

					Indexes substring = new Indexes(i, (short) 0, end2);
					TrieNode newTrie = new TrieNode(substring, null, null);
					siblingHolder.sibling = newTrie;
				}
				else if(ptr.firstChild == null)
				{
					int index = ptr.substr.wordIndex;
					int startIndex = ptr.substr.startIndex;
					int endIndex = ptr.substr.endIndex;

					System.out.println("xd1 " + index + startIndex + endIndex + (allWords[i].length() - 1));

					
					ptr.substr.endIndex = (short) (counter1 - 1);

					Indexes substring1 = new Indexes(index, counter1 , (short) endIndex);
					ptr.firstChild = new TrieNode(substring1, null, null);

					Indexes substring2 = new Indexes(i, counter1, (short) (allWords[i].length() - 1));
					ptr.sibling = new TrieNode(substring2, null, null);
				}
				else
				{
					
					ptr = ptr.firstChild;
					
					while(savePtr != null)
					{
						int prefixIndex = ptr.substr.startIndex;


						while(ptr.sibling != null)
						{
							int index = ptr.substr.wordIndex;
							int startIndex = ptr.substr.startIndex;
							int endIndex = ptr.substr.endIndex;
							
							System.out.println("xd2 " + index + startIndex + endIndex);
							
							

							String temp1 = allWords[index].substring(startIndex, endIndex);
							String temp2 = newWord.substring(startIndex, endIndex);

							int bop = 0;

							if(temp1.length() < temp2.length())
								bop = temp1.length();
							else
								bop = temp2.length();

							for(int x = 0; x < bop; x++)
							{
								if(temp1.charAt(x) == temp2.charAt(x))
									counter2++;
								else
									break;
							}

							if(counter2 == 0)
								ptr = ptr.sibling;
							else 
								break;	
						}
						
						if(counter2 == 0)
						{
							int index = ptr.substr.wordIndex;
							int startIndex = ptr.substr.startIndex;
							int endIndex = newWord.length();

							System.out.println("xd3 " + index + startIndex + endIndex);

							
							
							Indexes substring1 = new Indexes(i, (short) prefixIndex , (short) endIndex);
							ptr.sibling = new TrieNode(substring1, null, null);
						}
						else if(ptr.firstChild == null)
						{
							int index = savePtr.substr.wordIndex;
							int startIndex = ptr.substr.startIndex;
							int endIndex = ptr.substr.endIndex;
							
							System.out.println("xd4 " + index + startIndex + endIndex + ((allWords[i].length() - 1)));


							ptr.substr.endIndex = (short) (counter2 - 1);

							Indexes substring1 = new Indexes(index, counter2 , (short) endIndex);
							ptr.firstChild = new TrieNode(substring1, null, null);
						

							Indexes substring2 = new Indexes(i, counter2, (short) (allWords[i].length() - 1));
							ptr.firstChild.sibling = new TrieNode(substring2, null, null);
						}
						else
						{
							savePtr = savePtr.firstChild;
							ptr = savePtr;
							counter2 = 0;
						}
					}


				}









				/*
					savePtr = siblingPtr;
					ptr = siblingPtr;

					while(ptr != null)
					{
						boolean test = false;

						int index = ptr.substr.wordIndex;
						int startIndex = ptr.substr.startIndex;
						int endIndex = ptr.substr.endIndex;


						while(ptr != null || test == true) 	
						{
							int index1 = ptr.substr.wordIndex;
							int startIndex1 = ptr.substr.startIndex;
							int endIndex1 = ptr.substr.endIndex;
							siblingHolder = ptr;

							String temp1 =  allWords[index1].substring(startIndex1, endIndex1 + 1);
							String temp2 = newWord.substring(startIndex1, endIndex1);

							for(int x = 0; x < temp1.length(); x++)
							{
								if(temp1.charAt(x) == temp2.charAt(x))
								{
									counter2++;
									test = true;
								}
								else
									break;
							}
							if(test == true)
								break;

							ptr = ptr.sibling;
						}
						if(test == false)
						{
							Indexes substring1 = new Indexes(index, counter1 , (short) endIndex);
							ptr.sibling = new TrieNode(substring1, null, null);
						}
						else
						{



						}
					}
				 */	

				/*
						 while(siblingPtr != null) 	
						{
							int index1 = siblingPtr.substr.wordIndex;
							int startIndex1 = siblingPtr.substr.startIndex;
							int endIndex1 = siblingPtr.substr.endIndex;

							String temp1 =  allWords[index1].substring(startIndex1, endIndex1 + 1);
							String temp2 = newWord.substring(startIndex1, endIndex1);

							for(int x = 0; x < temp1.length(); x++)
							{
								if(temp1.charAt(x) == temp2.charAt(x))
								{
									counter2++;
									test = true;
								}
								else
									break;
							}
							siblingHolder = siblingPtr;
							siblingPtr = siblingPtr.sibling;
				 */








			}


		}








		return root;

	}
	
	
	
	//
	package trie;

import java.util.ArrayList;

/**
 * This class implements a Trie. 
 * 
 * @author Sesh Venugopal
 *
 */
public class Trie {

	// prevent instantiation
	private Trie() { }

	/**
	 * Builds a trie by inserting all words in the input array, one at a time,
	 * in sequence FROM FIRST TO LAST. (The sequence is IMPORTANT!)
	 * The words in the input array are all lower case.
	 * 
	 * @param allWords Input array of words (lowercase) to be inserted.
	 * @return Root of trie with all words inserted from the input array
	 */
	public static TrieNode buildTrie(String[] allWords) 
	{
		TrieNode root = new TrieNode(null, null, null);

		if(allWords.length == 0)
			return root;

		//Since the array is not empty, initialize first child
		root.firstChild = new TrieNode(new Indexes(0,  (short)(0), (short)(allWords[0].length() - 1)), null, null);

		//Initialize pointer and lastSeen nodes
		TrieNode ptr = root.firstChild, savePtr = root.firstChild;
		int similarChar = -1, startIndex = -1, endIndex = -1, wordIndex = -1;

		//Traverse through all words in array starting from second one and insert them

		for(int index = 1; index < allWords.length; index++) 
		{
			String word = allWords[index];

			//Terminate if ptr becomes null in traversal (no match case)

			while(ptr != null)
			{
				startIndex = ptr.substr.startIndex;
				endIndex = ptr.substr.endIndex;
				wordIndex = ptr.substr.wordIndex;

				//Need to check whether startIndex < word.length()

				if(startIndex > word.length()) 
				{
					savePtr = ptr;
					ptr = ptr.sibling;
					continue;
				}
				similarChar = similarUpTo(allWords[wordIndex].substring(startIndex, endIndex+1), word.substring(startIndex)); //Find index up to which strings are similar

				if(similarChar != -1)
					similarChar += startIndex;

				if(similarChar == -1) 
				{ 
					//No match at all
					savePtr = ptr;
					ptr = ptr.sibling;
				}
				else 
				{

					if(similarChar == endIndex) 
					{ //Full match

						savePtr = ptr;

						ptr = ptr.firstChild;

					}
					else if (similarChar < endIndex)
					{ 
						//Partial match
						savePtr = ptr;
						break;
					}

				}

			}
			//We did not find a match

			if(ptr == null) 
			{
				Indexes indexes = new Indexes(index, (short)startIndex, (short)(word.length()-1));
				savePtr.sibling = new TrieNode(indexes, null, null);
			} 
			else 
			{
				//Otherwise we'll need to split up the current node
				Indexes indexHolder = savePtr.substr; //Get the current indexes
				TrieNode childHolder = savePtr.firstChild; //Save a reference to first child so we don't lose everything under it

				//Update "parent" node indexes for new word indexes based on similarity
				Indexes newIndex = new Indexes(indexHolder.wordIndex, (short)(similarChar+1), indexHolder.endIndex);
				indexHolder.endIndex = (short)similarChar; //Update  "parent" word last index

				//Shift everything from before down and to the right of new parent
				savePtr.firstChild = new TrieNode(newIndex, null, null);
				savePtr.firstChild.firstChild = childHolder;
				savePtr.firstChild.sibling = new TrieNode(new Indexes((short)index, (short)(similarChar+1), (short)(word.length()-1)), null, null);
			}



			//At the very end, reset ptr and lastSeen

			ptr = savePtr = root.firstChild;

			similarChar = startIndex = endIndex = wordIndex = -1;

		}
		return root;

	}

	private static int similarUpTo(String inTrie, String insert) {

		//Placeholder return statement

		int upTo = 0;

		while(upTo < inTrie.length() && upTo < insert.length() && inTrie.charAt(upTo) == insert.charAt(upTo))
			upTo++;

		return (upTo-1);

	}


	/**
	 * Given a trie, returns the "completion list" for a prefix, i.e. all the leaf nodes in the 
	 * trie whose words start with this prefix. 
	 * For instance, if the trie had the words "bear", "bull", "stock", and "bell",
	 * the completion list for prefix "b" would be the leaf nodes that hold "bear", "bull", and "bell"; 
	 * for prefix "be", the completion would be the leaf nodes that hold "bear" and "bell", 
	 * and for prefix "bell", completion would be the leaf node that holds "bell". 
	 * (The last example shows that an input prefix can be an entire word.) 
	 * The order of returned leaf nodes DOES NOT MATTER. So, for prefix "be",
	 * the returned list of leaf nodes can be either hold [bear,bell] or [bell,bear].
	 *
	 * @param root Root of Trie that stores all words to search on for completion lists
	 * @param allWords Array of words that have been inserted into the trie
	 * @param prefix Prefix to be completed with words in trie
	 * @return List of all leaf nodes in trie that hold words that start with the prefix, 
	 * 			order of leaf nodes does not matter.
	 *         If there is no word in the tree that has this prefix, null is returned.
	 */
	public static ArrayList<TrieNode> completionList(TrieNode root, String[] allWords, String prefix) 
	{
		if(root == null) 
			return null;

		ArrayList<TrieNode> matches = new ArrayList<>();
		TrieNode ptr = root;

		while(ptr != null) 
		{
			//Get the substring at this node
			if(ptr.substr == null) //Possible that we're checking on root
				ptr = ptr.firstChild;

			String comparedWord = allWords[ptr.substr.wordIndex];
			String newWord = comparedWord.substring(0, ptr.substr.endIndex+1);

			if(comparedWord.startsWith(prefix) || prefix.startsWith(newWord))
			{
				if(ptr.firstChild != null) 
				{ 
					//this is not a full word, go to children
					matches.addAll(completionList(ptr.firstChild, allWords, prefix));
					ptr = ptr.sibling;
				} 
				else 
				{ //Otherwise this is a full string node
					matches.add(ptr);
					ptr = ptr.sibling;
				}
			} 
			else
			{
				ptr = ptr.sibling;
			}
		}
		return matches;
	}

	public static void print(TrieNode root, String[] allWords) 
	{
		System.out.println("\nTRIE\n");
		print(root, 1, allWords);
	}

	private static void print(TrieNode root, int indent, String[] words) 
	{
		if (root == null) {
			return;
		}
		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}

		if (root.substr != null) {
			String pre = words[root.substr.wordIndex]
					.substring(0, root.substr.endIndex+1);
			System.out.println("      " + pre);
		}

		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}
		System.out.print(" ---");
		if (root.substr == null) {
			System.out.println("root");
		} else {
			System.out.println(root.substr);
		}

		for (TrieNode ptr=root.firstChild; ptr != null; ptr=ptr.sibling) {
			for (int i=0; i < indent-1; i++) {
				System.out.print("    ");
			}
			System.out.println("     |");
			print(ptr, indent+1, words);
		}
	}
}
	
